# The codes are adapted from the sample codes given by Twitterdev through GitHub repository: https://github.com/twitterdev/Twitter-API-v2-sample-code/blob/main/User-Lookup/get_users_with_bearer_token.py

# STEP 1: Authentication with bearer token
# STEP 2: Specify the usernames of the users you would like to get infromation and define user fields. Once all set, url will be created.
# STEP 3: Connect to the endpoint and make requests. If the response code is 200, the connection is successful and the response will be returned in json format

import requests
import os
import json

os.environ['TOKEN'] = 'PUT YOUR BEARER TOKEN HERE'

bearer_token = os.environ.get("TOKEN")


def bearer_oauth(r):
    """
    Method required by bearer token authentication.
    """

    r.headers["Authorization"] = f"Bearer {bearer_token}"
    r.headers["User-Agent"] = "v2UserLookupPython"
    return r

def create_url():
    # Specify the usernames that you want to lookup below
    # You can enter up to 100 comma-separated values.
    usernames = "usernames=MercedesBenz,BMW,Honda,VW" # Here is just example, put the name of the account that you want to search. Here I have put 4 accounts to search
    user_fields = "user.fields=description,created_at,id,public_metrics,url,verified"
    # User fields are adjustable, options include:
    # created_at, description, entities, id, location, name,
    # pinned_tweet_id, profile_image_url, protected,
    # public_metrics, url, username, verified, and withheld
    url = "https://api.twitter.com/2/users/by?{}&{}".format(usernames, user_fields)
    return url


def connect_to_endpoint(url):
    response = requests.request("GET", url, auth=bearer_oauth)
    print("Endpoint Response Code: " + str(response.status_code))
    if response.status_code != 200:
        raise Exception(response.status_code, response.text)
    return response.json()


def main():
    url = create_url()
    json_response = connect_to_endpoint(url)
    print(json.dumps(json_response, indent=4, sort_keys=True))


if __name__ == "__main__":
    main()
